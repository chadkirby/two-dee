// Generated by CoffeeScript 1.9.1
var defineProperty, flatten, isNumber,
  slice = [].slice;

isNumber = function() {
  var k, len, obj, objs;
  objs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  for (k = 0, len = objs.length; k < len; k++) {
    obj = objs[k];
    if (!((obj != null) && ((obj === +obj) || (toString.call(obj) === '[object Number]')))) {
      return false;
    }
  }
  return true;
};

defineProperty = Object.defineProperty;

flatten = function(array) {
  return array.reduce(function(memo, value) {
    if (Array.isArray(value)) {
      return memo.concat(flatten(value));
    }
    memo.push(value);
    return memo;
  }, []);
};

module.exports = {
  fuzzyEqual: function(me, that, precision) {
    if (precision == null) {
      precision = 0.001;
    }
    return (1.0 - Math.abs(me - that) / precision) >= 0;
  },
  hypot: function(me, y) {
    return Math.sqrt(me * me + y * y);
  },
  square: function(val) {
    return val * val;
  },
  roundTo: function(me, nearest) {
    if (nearest == null) {
      nearest = 1;
    }
    return Math.round(me / nearest) * nearest;
  },
  exclusivelyBetween: function(me, lo, hi) {
    return (lo < me && me < hi);
  },
  inclusivelyBetween: function(me, lo, hi) {
    return (lo <= me && me <= hi);
  },
  getName: function(obj) {
    var results;
    results = /function (.+?)\(/.exec(obj.toString());
    if ((results != null ? results.length : void 0) > 1) {
      return results[1];
    } else {
      return "";
    }
  },
  isNumber: isNumber,
  defProp: function(obj) {
    var key, name, names, opts, results1;
    results1 = [];
    for (key in obj) {
      opts = obj[key];
      names = key.split(',');
      results1.push((function() {
        var k, len, results2;
        results2 = [];
        for (k = 0, len = names.length; k < len; k++) {
          name = names[k];
          name = name.trim();
          defineProperty(this.prototype, name, opts);
          if (opts.set != null) {
            results2.push((function(_this) {
              return function(name) {
                return defineProperty(_this.prototype, name + "_", {
                  value: function(val) {
                    this[name] = val;
                    return this;
                  }
                });
              };
            })(this)(name));
          } else {
            results2.push(void 0);
          }
        }
        return results2;
      }).call(this));
    }
    return results1;
  },
  get: function(obj) {
    var fn, key, name, names, results1;
    results1 = [];
    for (key in obj) {
      fn = obj[key];
      names = key.split(',');
      results1.push((function() {
        var k, len, results2;
        results2 = [];
        for (k = 0, len = names.length; k < len; k++) {
          name = names[k];
          results2.push(defineProperty(this.prototype, name.trim(), {
            get: fn
          }));
        }
        return results2;
      }).call(this));
    }
    return results1;
  },
  flatten: flatten,
  doPairs: function(obj, fn) {
    var i, key, n, results1, val;
    if (fn == null) {
      fn = function(a, b, i, i1, i2) {
        return [a, b];
      };
    }
    i = 0;
    results1 = [];
    for (key in obj) {
      val = obj[key];
      if ((!isNaN(n = parseInt(key))) && (obj[n + 1] != null)) {
        results1.push(fn.call(obj, val, obj[1 + n], i++, n, 1 + n));
      }
    }
    return results1;
  },
  clump: function(arr, n) {
    var i, j, k, ref, ref1, results1;
    if (n == null) {
      n = 2;
    }
    results1 = [];
    for (j = k = 0, ref = arr.length, ref1 = n; ref1 > 0 ? k < ref : k > ref; j = k += ref1) {
      results1.push((function() {
        var l, ref2, results2;
        results2 = [];
        for (i = l = 0, ref2 = n; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
          if ((i + j) < arr.length) {
            results2.push(arr[i + j]);
          }
        }
        return results2;
      })());
    }
    return results1;
  }
};
