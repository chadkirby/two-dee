// Generated by CoffeeScript 1.6.2
var NumberPair, PI, abs, atan2, cos, defineProperty, fuzzyEqual, hypot, isNumber, max, min, p, roundTo, sin, sqrt, util,
  __slice = [].slice;

sin = Math.sin, cos = Math.cos, atan2 = Math.atan2, sqrt = Math.sqrt, abs = Math.abs, max = Math.max, min = Math.min, PI = Math.PI;

util = require('./utilities');

isNumber = util.isNumber, fuzzyEqual = util.fuzzyEqual, hypot = util.hypot, roundTo = util.roundTo;

defineProperty = Object.defineProperty;

NumberPair = (function() {
  var defProp;

  function NumberPair() {
    var numberArray;

    numberArray = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this instanceof NumberPair) {
      Object.defineProperty(this, '_numPair', {
        enumerable: false,
        value: numberArray.slice(0, 2)
      });
    }
  }

  NumberPair.prototype.copy = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(this.constructor, this._numPair, function(){});
  };

  defProp = util.defProp.bind(NumberPair);

  defProp({
    0: {
      get: (function() {
        return this._numPair[0];
      }),
      set: (function(val) {
        return this._numPair[0] = val;
      })
    },
    1: {
      get: (function() {
        return this._numPair[1];
      }),
      set: (function(val) {
        return this._numPair[1] = val;
      })
    },
    length: {
      value: 2
    },
    type: {
      get: function() {
        return util.getName(this.constructor);
      }
    }
  });

  NumberPair.prototype.asString = function(opts) {
    var p0, p1, that, _ref;

    if (opts == null) {
      opts = {};
    }
    _ref = this._numPair, p0 = _ref[0], p1 = _ref[1];
    if (opts.round != null) {
      that = NumberPair["new"](opts.round);
      p0 = roundTo(p0, that[0]);
      p1 = roundTo(p1, that[1]);
    }
    if (opts.fixed != null) {
      p0 = p0.toFixed(opts.fixed);
      p1 = p1.toFixed(opts.fixed);
    }
    return "" + p0 + ", " + p1;
  };

  NumberPair.prototype.asArray = function() {
    return this._numPair.slice(0);
  };

  NumberPair.prototype.toString = NumberPair.prototype.asString;

  NumberPair.prototype.inspect = function() {
    return "" + this.type + "( " + (this.asString({
      fixed: 4
    })) + " )";
  };

  NumberPair.prototype.envelope = function(offset) {
    if (offset == null) {
      offset = 3;
    }
  };

  NumberPair.prototype.set = function(arg0, arg1) {
    if (arg0 != null) {
      this._numPair[0] = arg0;
    }
    if (arg1 != null) {
      this._numPair[1] = arg1;
    }
    return this;
  };

  NumberPair.prototype.isEq = function() {
    var that, _ref;

    that = (_ref = this.constructor)["new"].apply(_ref, arguments);
    if (that == null) {
      return false;
    }
    return (that[0] === this[0]) && (that[1] === this[1]);
  };

  NumberPair.prototype.isFuzzyEq = function(that, precision) {
    var _ref;

    that = (_ref = this.constructor)["new"].apply(_ref, arguments);
    if (that == null) {
      return false;
    }
    if (arguments.length > 2) {
      precision = arguments[3];
    }
    return fuzzyEqual(that[0], this[0], precision) && fuzzyEqual(that[1], this[1], precision);
  };

  NumberPair.prototype.round = function() {
    var that;

    that = NumberPair["new"].apply(NumberPair, arguments);
    return this.constructor["new"](roundTo(this[0], that[0]), roundTo(this[1], that[1]));
  };

  NumberPair.prototype.mod = function() {
    var that;

    that = NumberPair["new"].apply(NumberPair, arguments);
    return new this.constructor(this[0] % that[0], this[1] % that[1]);
  };

  NumberPair["new"] = function(x, y) {
    switch (false) {
      case !(x instanceof NumberPair):
        return x;
      case !isNumber(x[0], x[1]):
        return new NumberPair(x[0], x[1]);
      case !isNumber(x, y):
        return new NumberPair(x, y);
      case !isNumber(x):
        return new NumberPair(x, x);
      default:
        console.trace();
        throw "NumberPair.new requires numeric inputs; got " + x + " and " + y;
    }
  };

  return NumberPair;

})();

module.exports = NumberPair;

if (require.main === module) {
  p = new NumberPair(1 / 3, 1 / 3);
  console.log(p, p[0], p[1]);
  console.log(p.round(1 / 2, 1 / 4));
  console.log(p.copy());
}
