// Generated by CoffeeScript 1.6.2
var PI, Point, Polar2d, abs, atan2, cos, defineProperty, fuzzyEqual, hypot, isNumber, p, sin, sqrt, util;

sin = Math.sin, cos = Math.cos, atan2 = Math.atan2, sqrt = Math.sqrt, abs = Math.abs, PI = Math.PI;

Point = require('./Point2d');

util = require('./utilities');

isNumber = util.isNumber, fuzzyEqual = util.fuzzyEqual, hypot = util.hypot;

defineProperty = Object.defineProperty;

Polar2d = (function() {
  var defProp, get,
    _this = this;

  function Polar2d(rho, theta) {
    if (!(this instanceof Polar2d)) {
      return new Polar2d(rho, theta);
    }
    this.rho = rho;
    this.theta = theta;
  }

  defProp = function(obj) {
    var key, opts, _results;

    _results = [];
    for (key in obj) {
      opts = obj[key];
      _results.push(defineProperty(Polar2d.prototype, key, opts));
    }
    return _results;
  };

  defProp({
    0: {
      get: (function() {
        return this.rho;
      }),
      set: (function(new_rho) {
        return this.rho = new_rho;
      })
    },
    1: {
      get: (function() {
        return this.theta;
      }),
      set: (function(new_theta) {
        return this.theta = new_theta;
      })
    },
    real: {
      get: (function() {
        return this.rho * cos(this.theta);
      }),
      set: (function(new_real) {
        var _ref;

        return _ref = this.asPoint.x_(new_real).asPolar, this.rho = _ref.rho, this.theta = _ref.theta, _ref;
      })
    },
    x: {
      get: (function() {
        return this.rho * cos(this.theta);
      }),
      set: (function(new_real) {
        var _ref;

        return _ref = this.asPoint.x_(new_real).asPolar, this.rho = _ref.rho, this.theta = _ref.theta, _ref;
      })
    },
    imag: {
      get: (function() {
        return this.rho * sin(this.theta);
      }),
      set: (function(new_imag) {
        var _ref;

        return _ref = this.asPoint.y_(new_imag).asPolar, this.rho = _ref.rho, this.theta = _ref.theta, _ref;
      })
    },
    y: {
      get: (function() {
        return this.rho * sin(this.theta);
      }),
      set: (function(new_imag) {
        var _ref;

        return _ref = this.asPoint.y_(new_imag).asPolar, this.rho = _ref.rho, this.theta = _ref.theta, _ref;
      })
    }
  });

  get = function(obj) {
    var fn, key, _results;

    _results = [];
    for (key in obj) {
      fn = obj[key];
      _results.push(Object.defineProperty(Polar2d.prototype, key, {
        get: fn
      }));
    }
    return _results;
  };

  get({
    magnitude: function() {
      return this.rho;
    }
  });

  get({
    angle: function() {
      return this.theta;
    }
  });

  get({
    phase: function() {
      return this.theta;
    }
  });

  get({
    asArray: function() {
      return [this.rho, this.theta];
    }
  });

  get({
    asString: function() {
      return "" + this.rho + ", " + this.theta;
    }
  });

  get({
    asPolar: function() {
      return this;
    }
  });

  get({
    asPoint: function() {
      return new Point(this.real, this.imag);
    }
  });

  get({
    type: function() {
      return util.getName(this.constructor);
    }
  });

  Polar2d.prototype.toString = function() {
    return this.asString;
  };

  Polar2d.prototype.inspect = function() {
    return "" + this.type + "( " + this.asString + " )";
  };

  Polar2d.prototype.rho_ = function(val) {
    this.rho = val;
    return this;
  };

  Polar2d.prototype.theta_ = function(val) {
    this.theta = val;
    return this;
  };

  Polar2d.prototype.scale = function(scale) {
    return new Polar2d(this.rho * scale, this.theta);
  };

  Polar2d.prototype.rotate = function(angle) {
    return new Polar2d(this.rho, this.theta + angle);
  };

  Polar2d.prototype.isEq = function(that, precision) {
    var aPoint;

    aPoint = Point["new"](that).asPolar;
    if (!((aPoint.rho != null) && (aPoint.theta != null))) {
      return false;
    }
    if (precision != null) {
      return fuzzyEqual(aPoint.rho, this.rho, precision) && fuzzyEqual(aPoint.theta, this.theta, precision);
    } else {
      return (aPoint.rho === this.rho) && (aPoint.theta === this.theta);
    }
  };

  Polar2d.degrad = function(me) {
    return me * 0.017453292519943295;
  };

  Polar2d.raddeg = function(me) {
    return me * 57.29577951308232;
  };

  return Polar2d;

}).call(this);

module.exports = Polar2d;

if (require.main === module) {
  p = Polar2d(1, 0);
  console.log(p.asPoint);
  p.x += 1;
  console.log(p, p.asPoint);
}
